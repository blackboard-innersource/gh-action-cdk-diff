{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bundle": {
      "name": "bundle",
      "description": "Prepare assets",
      "steps": [
        {
          "spawn": "bundle:index"
        }
      ]
    },
    "bundle:index": {
      "name": "bundle:index",
      "description": "Create a JavaScript bundle from src/index.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/index.ts --target=\"node20\" --platform=\"node\" --outfile=\"dist/index.js\" --external:@aws-cdk/aws-service-spec --external:fs --external:fsevents --sourcemap"
        }
      ]
    },
    "bundle:index:watch": {
      "name": "bundle:index:watch",
      "description": "Continuously update the JavaScript bundle from src/index.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/index.ts --target=\"node20\" --platform=\"node\" --outfile=\"dist/index.js\" --external:@aws-cdk/aws-service-spec --external:fs --external:fsevents --sourcemap --watch"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile"
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "npm install"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "npm ci"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package"
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation"
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation",
      "steps": [
        {
          "spawn": "bundle"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests"
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --no-deprecated --dep=dev,peer,prod,optional --filter=@eslint/js,@swc/core,@swc/jest,@types/diff,@types/fs-extra,@typescript-eslint/parser,action-docs,aws-sdk,aws-sdk-client-mock,esbuild,eslint-config-prettier,eslint-import-resolver-typescript,eslint-plugin-import-x,eslint-plugin-prettier,husky,lint-staged,prettier,projen,projen-github-action-typescript,ts-node,typescript,typescript-eslint,@actions/core,@actions/github,@aws-cdk/aws-service-spec,@aws-cdk/cloud-assembly-schema,@aws-cdk/cloudformation-diff,@aws-cdk/cx-api,@aws-cdk/toolkit-lib,@aws-sdk/client-cloudformation,@aws-sdk/client-sts,@aws-sdk/credential-providers,@octokit/webhooks-definitions,@smithy/types,diff,fs-extra,glob-promise"
        },
        {
          "exec": "npm install"
        },
        {
          "exec": "npm update @eslint/js @swc/core @swc/jest @types/diff @types/fs-extra @types/mock-fs @types/node @typescript-eslint/parser action-docs aws-sdk aws-sdk-client-mock constructs esbuild eslint-config-prettier eslint-import-resolver-typescript eslint-plugin-import-x eslint-plugin-prettier eslint husky lint-staged mock-fs prettier projen projen-github-action-typescript ts-node typescript typescript-eslint @actions/core @actions/exec @actions/github @actions/io @actions/tool-cache @aws-cdk/aws-service-spec @aws-cdk/cloud-assembly-schema @aws-cdk/cloudformation-diff @aws-cdk/cx-api @aws-cdk/toolkit-lib @aws-sdk/client-cloudformation @aws-sdk/client-sts @aws-sdk/credential-providers @octokit/webhooks-definitions @smithy/types chalk diff fs-extra glob-promise"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "tsc --build -w"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
